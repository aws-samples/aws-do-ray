apiVersion: ray.io/v1
kind: RayService
metadata:
  name: stable_diffusion_cpu
spec:
  serveConfigV2: |
    applications:
      - name: stable_diffusion_cpu
        import_path: stable_diffusion_cpu:entrypoint
        runtime_env:
          working_dir: "https://github.com/aws-samples/aws-do-ray/tree/main/Container-Root/ray/rayservice/stable_diffusion_cpu/stable_diffusion_cpu.zip"
          #pip: ["diffusers==0.2.4", "openvino[onnx,pytorch]", "numpy==1.21.2", "opencv-python==4.5.5.64", "transformers==4.16.2", "tqdm==4.64.0", "huggingface_hub==0.9.0", "scipy==1.9.0", "watchdog==2.1.9", "ftfy==6.1.1", "pillow==9.0.1", "piexif==1.1.3"]
  rayClusterConfig:
    rayVersion: '2.9.0' # Should match the Ray version in the image of the containers
    ######################headGroupSpecs#################################
    # Ray head pod template.
    headGroupSpec:
      # The `rayStartParams` are used to configure the `ray start` command.
      # See https://github.com/ray-project/kuberay/blob/master/docs/guidance/rayStartParams.md for the default settings of `rayStartParams` in KubeRay.
      # See https://docs.ray.io/en/latest/cluster/cli.html#ray-start for all available options in `rayStartParams`.
      rayStartParams:
        dashboard-host: '0.0.0.0'
      # Pod template
      template:
        spec:
          containers:
          - name: stable-diffusion-cpu-head
            image: rayproject/ray-ml:2.9.0-py310-cpu
            #image: iankoulski/do-stablediffusion:ray-2.9.0
            env:
            # - name: AWS_ACCESS_KEY_ID       ## after running ./deploy/kubectl-secrets/kubectl-secret-keys.sh
            #   valueFrom:                    ## if you need your code to access other private S3 buckets
            #     secretKeyRef:
            #       name: aws-creds
            #       key: AWS_ACCESS_KEY_ID
            # - name: AWS_SECRET_ACCESS_KEY
            #   valueFrom:
            #     secretKeyRef:
            #       name: aws-creds
            #       key: AWS_SECRET_ACCESS_KEY
            # - name: AWS_SESSION_TOKEN
            #   valueFrom:
            #     secretKeyRef:
            #       name: aws-creds
            #       key: AWS_SESSION_TOKEN
            ports:
            - containerPort: 6379
              name: gcs
            - containerPort: 8265
              name: dashboard
            - containerPort: 10001
              name: client
            - containerPort: 8000
              name: serve
            volumeMounts:
              - mountPath: /tmp/ray
                name: ray-logs
            resources:
              limits:
                cpu: "2"
                memory: "16G"
              requests:
                cpu: "2"
                memory: "16G"
          volumes:
            - name: ray-logs
              emptyDir: {}
    workerGroupSpecs:
    # The pod replicas in this group typed worker
    - replicas: 1
      minReplicas: 1
      maxReplicas: 10
      groupName: stable-diffusion-cpu-workers
      rayStartParams: {}
      # Pod template
      template:
        spec:
          containers:
          - name: stable-diffusion-cpu-worker
            image: rayproject/ray-ml:2.9.0-py310-cpu
            #image: iankoulski/do-stablediffusion:ray-2.9.0
            lifecycle:
              preStop:
                exec:
                  command: ["/bin/sh","-c","ray stop"]
            resources:
              limits:
                cpu: "4"
                memory: "24G"
              requests:
                cpu: "2"
                memory: "24G"
          # Please add the following taints to the GPU node.
          # tolerations:
          #   - key: "ray.io/node-type"
          #     operator: "Equal"
          #     value: "worker"
          #     effect: "NoSchedule"
