apiVersion: ray.io/v1
kind: RayJob
metadata:
  name: rayjob-ml
spec:
  # submissionMode specifies how RayJob submits the Ray job to the RayCluster.
  # The default value is "K8sJobMode", meaning RayJob will submit the Ray job via a submitter Kubernetes Job.
  # The alternative value is "HTTPMode", indicating that KubeRay will submit the Ray job by sending an HTTP request to the RayCluster.
  # submissionMode: "K8sJobMode"
  # entrypoint: python /home/ray/samples/sample_code.py
  entrypoint: python /s3/code/train_images-ray/train_images-ray.py
  # shutdownAfterJobFinishes specifies whether the RayCluster should be deleted after the RayJob finishes. Default is false.
  # shutdownAfterJobFinishes: false

  # ttlSecondsAfterFinished specifies the number of seconds after which the RayCluster will be deleted after the RayJob finishes.
  # ttlSecondsAfterFinished: 10

  # activeDeadlineSeconds is the duration in seconds that the RayJob may be active before
  # KubeRay actively tries to terminate the RayJob; value must be positive integer.
  # activeDeadlineSeconds: 120

  # RuntimeEnvYAML represents the runtime environment configuration provided as a multi-line YAML string.
  # See https://docs.ray.io/en/latest/ray-core/handling-dependencies.html for details.
  # (New in KubeRay version 1.0.)
  runtimeEnvYAML: |
    pip:
      - requests==2.31.0
      - pendulum==2.1.2

  # Suspend specifies whether the RayJob controller should create a RayCluster instance.
  # If a job is applied with the suspend field set to true, the RayCluster will not be created and we will wait for the transition to false.
  # If the RayCluster is already created, it will be deleted. In the case of transition to false, a new RayCluster will be created.
  # suspend: false

  # rayClusterSpec specifies the RayCluster instance to be created by the RayJob controller.
  rayClusterSpec:
    # Ray head pod template
    headGroupSpec:
      # The `rayStartParams` are used to configure the `ray start` command.
      # See https://github.com/ray-project/kuberay/blob/master/docs/guidance/rayStartParams.md for the default settings of `rayStartParams` in KubeRay.
      # See https://docs.ray.io/en/latest/cluster/cli.html#ray-start for all available options in `rayStartParams`.
      rayStartParams:
        dashboard-host: '0.0.0.0'
      #pod template
      template:
        spec:
          securityContext:
            runAsUser: 0
            runAsGroup: 0
            fsGroup: 0
          containers:
          - name: ray-head
            image: rayproject/ray-ml:latest     ## IMAGE: Here you may choose which image your head node will run
            env:                                ## ENV: Here is where you can send stuff to the end node
              - name: RAY_GRAFANA_IFRAME_HOST   ## PROMETHEUS AND GRAFANA
                value: http://localhost:3000
              - name: RAY_GRAFANA_HOST
                value: http://prometheus-grafana.prometheus-system.svc:80
              - name: RAY_PROMETHEUS_HOST
                value: http://prometheus-kube-prometheus-prometheus.prometheus-system.svc:9090
              ## environment variables for code
              # - name: counter_name
              #   value: "test_counter"
              # - name: AWS_ACCESS_KEY_ID       ## after running ./deploy/kubectl-secrets/kubectl-secret-keys.sh
              #   valueFrom:                    ## if you need your code to access other private S3 buckets
              #     secretKeyRef:
              #       name: aws-creds
              #       key: AWS_ACCESS_KEY_ID
              # - name: AWS_SECRET_ACCESS_KEY
              #   valueFrom:
              #     secretKeyRef:
              #       name: aws-creds
              #       key: AWS_SECRET_ACCESS_KEY
              # - name: AWS_SESSION_TOKEN
              #   valueFrom:
              #     secretKeyRef:
              #       name: aws-creds
              #       key: AWS_SESSION_TOKEN
            lifecycle:
              preStop:
                exec:
                  command: ["/bin/sh","-c","ray stop"]
            resources:
              limits:                                    ## LIMITS: Set resource limits for your head node
                cpu: 4
                memory: 8Gi
              requests:                                    ## REQUESTS: Set resource requests for your head node
                cpu: 4
                memory: 8Gi
            ports:
            - containerPort: 6379
              name: gcs-server
            - containerPort: 8265 # Ray dashboard
              name: dashboard
            - containerPort: 10001
              name: client
            volumeMounts:                                    ## VOLUMEMOUNTS: Mount your S3 CSI EKS Add-On to head node
            - name: persistent-storage
              mountPath: /s3
            - name: ray-logs
              mountPath: /tmp/ray
            - name: code-sample
              mountPath: /home/ray/samples
          volumes:
            - name: ray-logs
              emptyDir: {}
            - name: persistent-storage
              persistentVolumeClaim:
                claimName: s3-claim
            - name: code-sample
              configMap: 
                # Provide the name of hte ConfigMap you want to mount
                name: ray-job-code-sample
                # An array of keys from the ConfigMap to create as files
                items: 
                  - key: sample_code.py
                    path: sample_code.py
    workerGroupSpecs:
    # the pod replicas in this group typed worker
    - replicas: 8                                    ## REPLICAS: How many worker pods you want - one per node
      minReplicas: 1
      maxReplicas: 10
      # logical group name, for this called small-group, also can be functional
      groupName: gpu-group
      rayStartParams:
        num-gpus: "1"
      #pod template
      template:
        spec:
          securityContext:
            runAsUser: 0
            runAsGroup: 0
            fsGroup: 0
          containers:
          - name: ray-worker
            image: rayproject/ray-ml:latest             ## IMAGE: Here you may choose which image your head node will run
            lifecycle:
              preStop:
                exec:
                  command: ["/bin/sh","-c","ray stop"]
            resources:
              limits:                                    ## LIMITS: Set resource limits for your worker nodes
                cpu: 4
                memory: 24Gi
                nvidia.com/gpu: 1
              requests:                                    ## REQUESTS: Set resource requests for your worker nodes
                cpu: 4
                memory: 24Gi
                nvidia.com/gpu: 1
            volumeMounts:                                    ## VOLUMEMOUNTS: Mount your S3 CSI EKS Add-On to worker nodes
            - name: persistent-storage
              mountPath: /s3
            - name: ray-logs
              mountPath: /tmp/ray
          # Please add the following taints to the GPU node.
          tolerations:                                       ## TOLERATIONS: These would be the taints set on your node groups
            - key: "ray.io/node-type"                        ## in this case, these taints are set on my worker node group
              operator: "Equal"                              ## if no taints, leave blank or delete "tolerations"
              value: "worker"
              effect: "NoSchedule"
          volumes:
          - name: persistent-storage
            persistentVolumeClaim:
              claimName: s3-claim
          - name: ray-logs
            emptyDir: {}
    # SubmitterPodTemplate is the template for the pod that will run the `ray job submit` command against the RayCluster.
    # If SubmitterPodTemplate is specified, the first container is assumed to be the submitter container.
    # submitterPodTemplate:
    #   spec:
    #     restartPolicy: Never
    #     containers:
    #       - name: my-custom-rayjob-submitter-pod
    #         image: rayproject/ray:2.9.0
    #         # If Command is not specified, the correct command will be supplied at runtime using the RayJob spec `entrypoint` field.
    #         # Specifying Command is not recommended.
    #         # command: ["sh", "-c", "ray job submit --address=http://$RAY_DASHBOARD_ADDRESS --submission-id=$RAY_JOB_SUBMISSION_ID -- echo hello world"]

  
## Need a PodMonitor pod to monitor metrics for prometheus/grafana to use
---
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: ray-workers-monitor
  namespace: prometheus-system
  labels:
    release: prometheus
    ray.io/cluster: rayml # $RAY_CLUSTER_NAME: "kubectl get rayclusters.ray.io"
spec:
  jobLabel: ray-workers
  namespaceSelector:
    matchNames:
      - default
  selector:
    matchLabels:
      ray.io/node-type: worker
  podMetricsEndpoints:
  - port: metrics


######################Ray code sample#################################
# this sample is from https://docs.ray.io/en/latest/cluster/job-submission.html#quick-start-example
# it is mounted into the container and executed to show the Ray job at work
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ray-job-code-sample
data:
  sample_code.py: |
    import ray
    import os
    import requests

    ray.init()

    @ray.remote
    class Counter:
        def __init__(self):
            # Used to verify runtimeEnv
            self.name = os.getenv("counter_name")
            assert self.name == "test_counter"
            self.counter = 0

        def inc(self):
            self.counter += 1

        def get_counter(self):
            return "{} got {}".format(self.name, self.counter)

    counter = Counter.remote()

    for _ in range(5):
        ray.get(counter.inc.remote())
        print(ray.get(counter.get_counter.remote()))

    # Verify that the correct runtime env was used for the job.
    assert requests.__version__ == "2.31.0"





